from telebot.async_telebot import AsyncTeleBot
import asyncio
import aiofiles
from telebot import types
pedido_registro = {
    'username':[],
    'id': [],
    'quantidade': []
    
    }


token = '6911261815:AAEk1_jZTeCZR_EiYXNP0d2FBKK_qwQ900A'  
bot = AsyncTeleBot(token)
adm = '673195223'

mensagens_blacklist_venda =  ['pv', 'chama','vendo', 'pre√ßo', 'dinheiro', 'compra', 'comprar', 'Vip']


@bot.message_handler(func=lambda message: message.new_chat_members is not None)
async def welcome_new_members(message):
    
    # Envie uma mensagem de boas-vindas para o usu√°rio que acabou de entrar no grupo
    for new_member in message.new_chat_members:
        await bot.send_message(message.chat.id, f"Bem-vindo, {new_member.first_name}!, üòäEste √© um grupo gratuito, voc√™ pode contribuir com este projeto com o comando /doacao. Voc√™ tamb√©m pode pedir um curso ao administrador com o comando /pedido nome_do_curso")
       
@bot.message_handler(commands=['pedido'])
async def pedidos(message):
    async with aiofiles.open('usuarios.txt', 'a') as f:
        await f.write(f"{message.from_user.id}\n")
    async with aiofiles.open('logs.txt', 'a') as log:
        await log.write(f"{message.from_user.username}@{message.from_user.id} usou o comando /pedidos  \n")
    
    pedido_registro['id'].append(message.from_user.id)
    pedido_registro['quantidade'].append(3)
    pedido_registro['username'].append(message.from_user.username)
        
    quantidade = pedido_registro['quantidade'][pedido_registro['id'].index(message.from_user.id)]   
      
    
    curso = ' '.join(message.text.split()[1:])
    
    if curso == '':
        await bot.send_message(message.chat.id, "Por favor, digite o nome do curso que voc√™ deseja pedir.")
    
    elif curso != '' and quantidade > 0:    
        await bot.reply_to(message, f"Voc√™ enviou o seu pedido do curso: *{curso}* Um administrador foi notificado. Voc√™ ser√° marcado assim que o curso estiver disponivel  ‚úÖ")
        pedido_registro['id'].append(message.from_user.id)
        pedido_registro['quantidade'][pedido_registro['id'].index(message.from_user.id)] -=  1
            
        await bot.send_message(adm, f"Um novo pedido foi enviado pelo usu√°rio {message.from_user.username} com o curso *{curso}*")
    else:
        botao = types.KeyboardButton('/doacao')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(botao)
        await bot.reply_to(message, 'Limite de pedidos atingido')
        await bot.send_message(message.from_user.id, 'Voc√™ excedeu a quantidade de pedidos. Clique no botao para fazer uma contribui√ß√£o de qualquer valor. N√£o se preocupe, o grupo continua sendo gratuito, e voc√™ ainda pode usufruir dos materiais dispon√≠veis', reply_markup=markup)
        await bot.send_message(adm, f"O usu√°rio {message.from_user.username}, com o id {message.from_user.id} tentou pedir um curso, mas o limite de pedidos foi atingido.") 
        
        
@bot.message_handler(commands=['doacao'])
async def doacao(message):
    async with aiofiles.open('usuarios.txt', 'a') as f:
        await f.write(f"{message.from_user.id}\n")
    async with aiofiles.open('logs.txt', 'a') as log:
        await log.write(f"{message.from_user.username}@{message.from_user.id} usou o comando /doacao  \n")
    
    await bot.send_message(message.from_user.id, "Voc√™ pode fazer uma doa√ß√£o de qualquer valor para ajudar esse projetoüòä\n\nQRCode:\n\n 00020126580014BR.GOV.BCB.PIX01360578e8ae-f5b3-48c1-a7ac-94318f78ca6d5204000053039865802BR5917Rafael Souza Lima6009SAO PAULO621405104BxhovghWG6304B6D6\n\nOu link de pagamento:\n https://nubank.com.br/cobrar/496rb/6591cc12-eead-453e-a538-b8ac05e68151")
    await bot.reply_to(message, "Voc√™ recebeu uma mensagem com as informa√ß√µes necess√°rias, verifique")
    await bot.send_message(message.from_user.id, '''Caso voc√™ fa√ßa uma doa√ß√£o, envie o comprovante para esse bot,
    COLOQUE A PALAVRA "comprovante" na legenda antes de enviar, para o bot reconhecer o comprovante.
    ''')




@bot.message_handler(commands=['verificados'])
async def verificados(message):
    async with aiofiles.open('usuarios.txt', 'a') as f:
        await f.write(f"{message.from_user.id}\n")
    async with aiofiles.open('logs.txt', 'a') as log:
        await log.write(f"{message.from_user.username}@{message.from_user.id} usou o comando /verificados  \n")
    verificados = []
    async with aiofiles.open('verificados.txt', 'r') as f:
        usuarios = await f.readlines()
        for usuario in usuarios:
            verificados.append(f'@{str(usuario.strip())}')
        if verificados:
            await bot.reply_to(message, f"Os usu√°rios verificados s√£o:\n\n{'  -  '.join([str(usuario) for usuario in verificados])}")
        else:
            await bot.reply_to(message, "Nenhum vendedr foi verificado ainda, n√£o recomendamos fazer nenhum pagamento para.")




@bot.message_handler(commands=['regras'])
async def regras(message):
    await bot.reply_to(message, '''Regras do grupo:\n\n1. N√£o fale nada ofensivo, n√£o seja abusivo e n√£o fa√ßa spam.\n2. N√£o divulgue nada que n√£o seja de interesse ao grupo
3. N√£o divulgue links sem autoriza√ßao de um administrador \n4. N√£o Venda nada sem permiss√£o de um administrador 
                       ''')




@bot.message_handler(commands=['addverificado'])
async def addverificado(message):
    if message.from_user.id == int(adm):
        async with aiofiles.open('verificados.txt', 'a') as f:
            await f.write(f"{message.text.split()[1]}\n")
        await bot.reply_to(message, f"O vendedor {message.text.split()[1]} foi adicionado como verificado.")
    else:
        await bot.reply_to(message, "Voc√™ n√£o tem permiss√£o para isso.")
        


# remover verificado do txt
@bot.message_handler(commands=['remoververificado'])
async def remoververificado(message):
    if message.from_user.id == int(adm):
        async with aiofiles.open('verificados.txt', 'r') as f:
            usuarios = await f.readlines()
        async with aiofiles.open('verificados.txt', 'w') as f:
            for usuario in usuarios:
                if usuario.strip() != message.text.split()[1]:
                    await f.write(usuario)
        await bot.reply_to(message, f"O vendedor {message.text.split()[1]} foi removido como verificado.")
    else:
        await bot.reply_to(message, "Voc√™ n√£o tem permiss√£o para isso.")



@bot.message_handler(commands=['logs'])
async def logs(message):
    if message.from_user.id == int(adm):
        async with aiofiles.open('logs.txt', 'r') as f:
            logs = await f.read()
        await bot.send_message(message.from_user.id, logs)
    


@bot.message_handler(commands=['addblacklist'])
async def addblacklist(message):
    if message.from_user.id == int(adm):
        palavra = ''.join(message.text.split()[1])
        mensagens_blacklist_venda.append(palavra)
        await bot.reply_to(message, f"blacklist atualizada")
        
    else:
        await bot.reply_to(message, "Voc√™ n√£o tem permiss√£o para isso.")



@bot.message_handler(commands=['addpedido'])
async def addcontribuinte(message):
    if message.from_user.id == int(adm):
        usuario = message.text.split()[1]
        quantidade = int(message.text.split()[2])
        print(usuario, quantidade)
        pedido_registro['quantidade'][pedido_registro['username'].index(usuario)] = quantidade
        id_usuario = pedido_registro['id'][pedido_registro['username'].index(usuario)]
        print(pedido_registro['quantidade'][pedido_registro['username'].index(usuario)])
        await bot.reply_to(message, f"pedido atualizado")
        await bot.send_message(id_usuario, f"Sua quantidade de pedidos foi atualizada ‚úÖ")
    else:
        await bot.reply_to(message, "Voc√™ n√£o tem permiss√£o para isso.")


@bot.message_handler(commands=['link'])
async def link(message):
    await bot.reply_to(message, ' Este √© o link do grupo: https://t.me/+ZaDIfJJNJU1hODUx üòä')



@bot.message_handler(content_types=['photo'])
async def comprovante(message):
    if message.caption:
        legenda = message.caption
        if 'comprovante' in legenda.lower():
            await bot.reply_to(message, "O comprovante foi recebido, aguarde a confirma√ß√£o do administrador‚úÖ")
            await bot.forward_message(adm, message.chat.id, message.message_id)
            await bot.send_message(adm, f"O comprovante de {message.from_user.username} foi recebido")
    
    

@bot.message_handler(func=lambda message: True)
async def start(message):
    mensagem = message.text.lower()
    for palavra in mensagens_blacklist_venda:
        if palavra in mensagem:
            await bot.send_message(message.chat.id, '‚ùå‚ùå‚ùå‚ùåTome Cuidado ao comprar conteudos de usuarios n√£o autorizados por um administrador, n√£o chame ninguem no privado, e n√£o fa√ßa nenhum pagamento. digite o comando /verificados, e saiba quais s√£o os vendedores verificados pela administra√ß√£o')
            print(message.from_user.id)
            break








async def  main():
    try:
        await bot.polling(none_stop=True)
    except Exception as e:
        print(e)
asyncio.run(main())